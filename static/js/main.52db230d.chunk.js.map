{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Grid","container","spacing","item","sm","baseCurrency","TextField","type","value","onChange","onChangeValue","App","fetchData","a","base","state","fetch","get","json","res","setState","rateList","Object","keys","rates","map","key","id","baseRates","show","setShowed","console","error","showed","index","findIndex","data","handleRatesChanged","arrRates","handleValueChanged","e","target","handleSelectChanged","selectedCurrency","handleAddCurrency","arrIndex","push","modal","handleRemoveCurrency","filter","handleOpenDialog","handleCloseDialog","this","prevProps","prevState","filterredRateList","Paper","toFixed","Icon","onClick","Button","color","variant","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","classNamePrefix","options","label","DialogActions","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52db230d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, TextField } from \"@material-ui/core\";\n\nconst Header = props => {\n  return (\n    <div className=\"header-wrapper\">\n      <Grid container spacing={8}>\n        <Grid item sm={9}>\n          <span>{props.baseCurrency}</span>\n        </Grid>\n        <Grid item sm={3}>\n          <TextField\n            type=\"number\"\n            value={props.value}\n            onChange={props.onChangeValue}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport {\n  Grid,\n  Button,\n  Icon,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Paper\n} from \"@material-ui/core\";\nimport ReactSelect from \"react-select\";\n\nimport Header from \"./components/Header\";\n\nimport \"./dist/app.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      base: \"USD\",\n      showed: [\n        \"USD\",\n        \"CAD\",\n        \"IDR\",\n        \"GBP\",\n        \"CHF\",\n        \"SGD\",\n        \"INR\",\n        \"MYR\",\n        \"JPY\",\n        \"KRW\"\n      ],\n      rateList: [],\n      value: 10,\n      modal: false,\n      selectedCurrency: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.value !== this.state.value) {\n      this.handleRatesChanged();\n    }\n  }\n\n  // fetch data from API\n  fetchData = async () => {\n    const { base } = this.state;\n    try {\n      const get = await fetch(\n        `https://api.exchangeratesapi.io/latest?base=${base}`\n      );\n      const res = await get.json();\n\n      this.setState({\n        rateList: Object.keys(res.rates).map(key => ({\n          id: key,\n          rates: res.rates[key],\n          baseRates: res.rates[key],\n          show: false\n        }))\n      });\n\n      this.setShowed();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // set which currency showed based on [showed]\n  setShowed = res => {\n    let { rateList, showed } = this.state;\n    showed.map(show => {\n      const index = rateList.findIndex(data => data.id === show);\n      return (rateList[index].show = true);\n    });\n    this.setState({\n      rateList\n    });\n\n    this.handleRatesChanged();\n  };\n\n  // handle changes rates\n  handleRatesChanged = () => {\n    const { rateList, value } = this.state;\n    let arrRates = [...rateList];\n    if (value) {\n      arrRates.map(data => {\n        return (data.rates = data.baseRates * value);\n      });\n    } else {\n      arrRates.map(data => {\n        return (data.rates = data.baseRates);\n      });\n    }\n    this.setState({\n      rateList: arrRates\n    });\n  };\n\n  // handle initial value changed\n  handleValueChanged = e => {\n    const { value } = e.target;\n    this.setState({\n      value\n    });\n  };\n\n  // handle select new currency\n  handleSelectChanged = e => {\n    const { value } = e;\n    this.setState({\n      selectedCurrency: value\n    });\n  };\n\n  // handle add new currency\n  handleAddCurrency = () => {\n    const { selectedCurrency, showed, rateList } = this.state;\n\n    const arrIndex = rateList.findIndex(data => data.id === selectedCurrency);\n    const arrRates = [...rateList];\n    arrRates[arrIndex].show = true;\n\n    showed.push(selectedCurrency);\n\n    this.setState({\n      rateList: arrRates,\n      modal: false\n    });\n  };\n\n  // handle remove selected currency\n  handleRemoveCurrency = id => {\n    const { showed, rateList } = this.state;\n\n    const arrIndex = rateList.findIndex(data => data.id === id);\n    const arrRates = [...rateList];\n    arrRates[arrIndex].show = false;\n\n    showed.filter(data => data !== id);\n\n    this.setState({\n      rateList: arrRates\n    });\n  };\n\n  handleOpenDialog = () => {\n    this.setState({\n      modal: true\n    });\n  };\n\n  handleCloseDialog = () => {\n    this.setState({\n      modal: false\n    });\n  };\n\n  render() {\n    const { rateList } = this.state;\n    const filterredRateList = rateList.filter(data => {\n      return !data.show;\n    });\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <Header\n            baseCurrency={this.state.base}\n            value={this.state.value}\n            onChangeValue={this.handleValueChanged}\n          />\n          <div className=\"list-wrapper\">\n            {rateList &&\n              rateList.map((data, index) => {\n                // Only show data when `show` === true\n                if (data.show) {\n                  return (\n                    <Paper\n                      className=\"list-content\"\n                      key={`${data.id} - ${index}`}\n                    >\n                      <Grid container spacing={8}>\n                        <Grid item sm={8}>\n                          <p className=\"title\">{data.id}</p>\n                          <span>{`1 USD = ${data.id} ${data.baseRates}`}</span>\n                        </Grid>\n                        <Grid item sm={3}>\n                          <p className=\"rates\">{data.rates.toFixed(2)}</p>\n                        </Grid>\n                        <Icon\n                          className=\"icon-delete\"\n                          onClick={() => this.handleRemoveCurrency(data.id)}\n                        >\n                          close\n                        </Icon>\n                      </Grid>\n                    </Paper>\n                  );\n                }\n              })}\n          </div>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={this.handleOpenDialog}\n          >\n            + Add Currenncy\n          </Button>\n        </div>\n        <Dialog\n          open={this.state.modal}\n          onClose={this.handleCloseDialog}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">Add New Currenncy</DialogTitle>\n          <DialogContent>\n            <ReactSelect\n              className=\"react-select\"\n              classNamePrefix=\"react-select\"\n              options={filterredRateList.map(data => ({\n                label: data.id,\n                value: data.id\n              }))}\n              onChange={this.handleSelectChanged}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={this.handleCloseDialog}\n              color=\"primary\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={this.handleAddCurrency}\n              color=\"primary\"\n              variant=\"contained\"\n            >\n              Submit\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}